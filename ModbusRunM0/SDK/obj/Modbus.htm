<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\obj\Modbus.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\obj\Modbus.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, RVCT4.0 [Build 728]: Last Updated: Sat Oct 27 16:38:11 2018
<BR><P>
<H3>Maximum Stack Usage =        288 bytes + Unknown(Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
SX1276Process &rArr; SX1276FskProcess &rArr; SX1276FskReadAfc &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1e8ba50]">eBTFuncReadHoldingRegister</a>
 <LI><a href="#[1e89a34]">eMBFuncReportSlaveID</a>
 <LI><a href="#[1e8a2e0]">eMBFuncReadInputRegister</a>
 <LI><a href="#[1e8a718]">eMBFuncReadHoldingRegister</a>
 <LI><a href="#[1e8a664]">eMBFuncWriteMultipleHoldingRegister</a>
 <LI><a href="#[1e8a6a0]">eMBFuncWriteHoldingRegister</a>
 <LI><a href="#[1e8a6dc]">eMBFuncReadWriteMultipleHoldingRegister</a>
 <LI><a href="#[1e8b3c0]">eMBFuncReadCoils</a>
 <LI><a href="#[1e8b384]">eMBFuncWriteCoil</a>
 <LI><a href="#[1e8b348]">eMBFuncWriteMultipleCoils</a>
 <LI><a href="#[1e8aed4]">eMBFuncReadDiscreteInputs</a>
 <LI><a href="#[28b4910]">Reset_Handler</a>
 <LI><a href="#[28b48d4]">NMI_Handler</a>
 <LI><a href="#[28b4898]">HardFault_Handler</a>
 <LI><a href="#[28b485c]">SVC_Handler</a>
 <LI><a href="#[28b4820]">PendSV_Handler</a>
 <LI><a href="#[28b47e4]">SysTick_Handler</a>
 <LI><a href="#[28b46f4]">BOD_IRQHandler</a>
 <LI><a href="#[28b4280]">WDT_IRQHandler</a>
 <LI><a href="#[28b46b8]">EINT0_IRQHandler</a>
 <LI><a href="#[28b467c]">EINT1_IRQHandler</a>
 <LI><a href="#[28b4640]">GPIOP0P1_IRQHandler</a>
 <LI><a href="#[28b4604]">GPIOP2P3P4_IRQHandler</a>
 <LI><a href="#[28b4550]">PWMA_IRQHandler</a>
 <LI><a href="#[28b4514]">PWMB_IRQHandler</a>
 <LI><a href="#[28b43e8]">TMR0_IRQHandler</a>
 <LI><a href="#[1e8f650]">TMR1_IRQHandler</a>
 <LI><a href="#[28b06f8]">TMR2_IRQHandler</a>
 <LI><a href="#[28b4334]">TMR3_IRQHandler</a>
 <LI><a href="#[1e90c1c]">UART0_IRQHandler</a>
 <LI><a href="#[28b06bc]">UART1_IRQHandler</a>
 <LI><a href="#[28b4460]">SPI0_IRQHandler</a>
 <LI><a href="#[28b4424]">SPI1_IRQHandler</a>
 <LI><a href="#[28b4ab4]">Default_Handler</a>
 <LI><a href="#[28b4ab4]">Default_Handler</a>
 <LI><a href="#[28b45c8]">I2C0_IRQHandler</a>
 <LI><a href="#[295d140]">I2C1_IRQHandler</a>
 <LI><a href="#[28b4ab4]">Default_Handler</a>
 <LI><a href="#[28b4ab4]">Default_Handler</a>
 <LI><a href="#[28b4ab4]">Default_Handler</a>
 <LI><a href="#[28b4ab4]">Default_Handler</a>
 <LI><a href="#[28b4ab4]">Default_Handler</a>
 <LI><a href="#[28b47a8]">ACMP01_IRQHandler</a>
 <LI><a href="#[28b476c]">ACMP23_IRQHandler</a>
 <LI><a href="#[28b4ab4]">Default_Handler</a>
 <LI><a href="#[28b44d8]">PWRWU_IRQHandler</a>
 <LI><a href="#[28b4730]">ADC_IRQHandler</a>
 <LI><a href="#[28b4ab4]">Default_Handler</a>
 <LI><a href="#[28b449c]">RTC_IRQHandler</a>
 <LI><a href="#[1e9373c]">main</a>
 <LI><a href="#[28b4988]">SystemInit</a>
 <LI><a href="#[29f5d2c]">__main</a>
 <LI><a href="#[295b124]">SX1276Init</a>
 <LI><a href="#[295b0ac]">SX1276Reset</a>
 <LI><a href="#[295b034]">SX1276StartRx</a>
 <LI><a href="#[295b160]">SX1276GetRxPacket</a>
 <LI><a href="#[295b070]">SX1276SetTxPacket</a>
 <LI><a href="#[295b0e8]">SX1276Process</a>
 <LI><a href="#[1e8c20c]">eMBRTUStart</a>
 <LI><a href="#[1e8c1d0]">eMBRTUStop</a>
 <LI><a href="#[1e8c248]">eMBRTUSend</a>
 <LI><a href="#[1e8c284]">eMBRTUReceive</a>
 <LI><a href="#[1e8c158]">xMBRTUReceiveFSM</a>
 <LI><a href="#[1e8c0e0]">xMBRTUTransmitFSM</a>
 <LI><a href="#[1e8c11c]">xMBRTUTimerT35Expired</a>
 <LI><a href="#[1e8ba50]">eBTFuncReadHoldingRegister</a>
 <LI><a href="#[1e89a34]">eMBFuncReportSlaveID</a>
 <LI><a href="#[1e8a2e0]">eMBFuncReadInputRegister</a>
 <LI><a href="#[1e8a718]">eMBFuncReadHoldingRegister</a>
 <LI><a href="#[1e8a664]">eMBFuncWriteMultipleHoldingRegister</a>
 <LI><a href="#[1e8a6a0]">eMBFuncWriteHoldingRegister</a>
 <LI><a href="#[1e8a6dc]">eMBFuncReadWriteMultipleHoldingRegister</a>
 <LI><a href="#[1e8b3c0]">eMBFuncReadCoils</a>
 <LI><a href="#[1e8b384]">eMBFuncWriteCoil</a>
 <LI><a href="#[1e8b348]">eMBFuncWriteMultipleCoils</a>
 <LI><a href="#[1e8aed4]">eMBFuncReadDiscreteInputs</a>
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[29f5d2c]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(.text)
</UL>
<P><STRONG><a name="[29f3590]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[29f3464]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[29f2690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[29f3428]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[29f2690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[29f3338]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7.o(.ARM.Collect$$$$00000007))

<P><STRONG><a name="[28b4910]"></a>Reset_Handler</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, startup_m051series.o(.text))

<P><STRONG><a name="[28b48d4]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m051series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[28b4898]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m051series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[28b485c]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m051series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[28b4820]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m051series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[28b47e4]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m051series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[28b47a8]"></a>ACMP01_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m051series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[28b476c]"></a>ACMP23_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m051series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[28b4730]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m051series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[28b46f4]"></a>BOD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m051series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[28b46b8]"></a>EINT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m051series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[28b467c]"></a>EINT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m051series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[28b4640]"></a>GPIOP0P1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m051series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[28b4604]"></a>GPIOP2P3P4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m051series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[28b45c8]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m051series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[28b4550]"></a>PWMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m051series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[28b4514]"></a>PWMB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m051series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[28b44d8]"></a>PWRWU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m051series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[28b449c]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m051series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[28b4460]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m051series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[28b4424]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m051series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[28b43e8]"></a>TMR0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m051series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[28b4334]"></a>TMR3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m051series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[28b4280]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m051series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[29f5a5c]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[29f5a20]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8c2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUInit
<LI><a href="#[1e8f560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Open
<LI><a href="#[1e933f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Open
<LI><a href="#[1e93430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[28b3a4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
<LI><a href="#[28b5edc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
</UL>

<P><STRONG><a name="[29f5930]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e89a34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncReportSlaveID
<LI><a href="#[1e8c194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peBTFrameSendCur
<LI><a href="#[29584d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetTxPacket
<LI><a href="#[295867c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaGetRxPacket
<LI><a href="#[295885c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskSetTxPacket
<LI><a href="#[29589c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskGetRxPacket
</UL>

<P><STRONG><a name="[29f58f4]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[28b7994]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_GetModuleClock
</UL>

<P><STRONG><a name="[29f58b8]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[29f57c8]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[29f5660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[29f5714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[29f578c]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[29f5750]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[29f5714]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[29f57c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[2958604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaProcess
<LI><a href="#[2958988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskProcess
</UL>

<P><STRONG><a name="[29f56d8]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[29f569c]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[29f5660]"></a>_memset$wrapper</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[29f57c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[2955814]"></a>__aeabi_dadd</STRONG> (Thumb, 376 bytes, Stack size 72 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[29f2fb4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[29f320c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[29f4760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[29f479c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[2952538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[2958604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaProcess
<LI><a href="#[2958988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskProcess
<LI><a href="#[29f5e1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;round
<LI><a href="#[29f63bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
</UL>

<P><STRONG><a name="[29f63bc]"></a>__aeabi_dsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2955814]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[29f5e1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;round
</UL>

<P><STRONG><a name="[2952538]"></a>__aeabi_drsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2955814]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[295d050]"></a>__aeabi_dmul</STRONG> (Thumb, 206 bytes, Stack size 88 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[29f479c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[2955d78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskReadAfc
<LI><a href="#[2958604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaProcess
<LI><a href="#[2958988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskProcess
<LI><a href="#[295d410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;B_LUX_GetLux
</UL>

<P><STRONG><a name="[29557d8]"></a>__aeabi_ddiv</STRONG> (Thumb, 282 bytes, Stack size 64 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[29f4760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[2950378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetRFFrequency
<LI><a href="#[295894c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskReadRssi
<LI><a href="#[2958988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskProcess
</UL>

<P><STRONG><a name="[295cf9c]"></a>__aeabi_ui2f</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ffltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[29f4508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[295d410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;B_LUX_GetLux
</UL>

<P><STRONG><a name="[295579c]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[29f479c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[2955d78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskReadAfc
<LI><a href="#[2958604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaProcess
<LI><a href="#[2958988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskProcess
</UL>

<P><STRONG><a name="[2955724]"></a>__aeabi_ui2d</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[29f479c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[2950378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetRFFrequency
<LI><a href="#[2958604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaProcess
<LI><a href="#[295894c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskReadRssi
<LI><a href="#[2958988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskProcess
</UL>

<P><STRONG><a name="[295cfd8]"></a>__aeabi_f2uiz</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, ffixui.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[295d410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;B_LUX_GetLux
</UL>

<P><STRONG><a name="[295588c]"></a>__aeabi_d2iz</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_d2iz &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[29f30e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[2955d78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskReadAfc
</UL>

<P><STRONG><a name="[2955850]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2uiz &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[29f30e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[2950378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetRFFrequency
<LI><a href="#[2958988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskProcess
</UL>

<P><STRONG><a name="[295d014]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[295d410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;B_LUX_GetLux
</UL>

<P><STRONG><a name="[29f3fa4]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text), UNUSED)

<P><STRONG><a name="[2952574]"></a>__aeabi_cdcmple</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[29f5e1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;round
</UL>

<P><STRONG><a name="[295d08c]"></a>__aeabi_d2f</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[29f3eb4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[295d410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;B_LUX_GetLux
</UL>

<P><STRONG><a name="[29f320c]"></a>__aeabi_llsl</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llshl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[2955814]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[29f479c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[29f5de0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
</UL>

<P><STRONG><a name="[29f31d0]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[29f30e0]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llushr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[2955850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[295588c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[29f479c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[29f5de0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
</UL>

<P><STRONG><a name="[29f30a4]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[29f2fb4]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, llsshr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_lasr
</UL>
<BR>[Called By]<UL><LI><a href="#[2955814]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[29f2f78]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[29f2bb8]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[29f3eb4]"></a>_float_round</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[295d08c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[29f4508]"></a>_float_epilogue</STRONG> (Thumb, 116 bytes, Stack size 12 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[295cf9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
</UL>

<P><STRONG><a name="[29f4760]"></a>_double_round</STRONG> (Thumb, 58 bytes, Stack size 40 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[29557d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[2955814]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[29f479c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[29f5de0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
</UL>

<P><STRONG><a name="[29f479c]"></a>_double_epilogue</STRONG> (Thumb, 188 bytes, Stack size 48 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[29f299c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_clz
<LI><a href="#[29f30e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[29f320c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[29f4760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[2955724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[295579c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[2955814]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[295d050]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>

<P><STRONG><a name="[29f5de0]"></a>_drnd</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, drnd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _drnd &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[29f30e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[29f320c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[29f4760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[29f5e1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;round
</UL>

<P><STRONG><a name="[29f63f8]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[29f5e1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;round
</UL>

<P><STRONG><a name="[29f2690]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[29f3428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[29f3464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[29f2654]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[29f2078]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[29f203c]"></a>__decompress1</STRONG> (Thumb, 88 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[295d44c]"></a>B_LUX_Delay5us</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, blux_v30b.o(i.B_LUX_Delay5us))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = B_LUX_Delay5us
</UL>
<BR>[Calls]<UL><LI><a href="#[1e937f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvSYS_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[295d1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;B_LUX_Stop
<LI><a href="#[295d230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;B_LUX_Start
<LI><a href="#[295d2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;B_LUX_SendByte
<LI><a href="#[295d2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;B_LUX_SendACK
<LI><a href="#[295d320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;B_LUX_RecvByte
<LI><a href="#[295d35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;B_LUX_RecvACK
</UL>

<P><STRONG><a name="[295d410]"></a>B_LUX_GetLux</STRONG> (Thumb, 200 bytes, Stack size 40 bytes, blux_v30b.o(i.B_LUX_GetLux))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = B_LUX_GetLux &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[295cf9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[295cfd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[295d014]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[295d050]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[295d08c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[295d1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;B_LUX_delay_nms
<LI><a href="#[295d1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;B_LUX_Stop
<LI><a href="#[295d230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;B_LUX_Start
<LI><a href="#[295d2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;B_LUX_SendByte
<LI><a href="#[295d2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;B_LUX_SendACK
<LI><a href="#[295d320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;B_LUX_RecvByte
</UL>
<BR>[Called By]<UL><LI><a href="#[1e93700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blux_v3bPoll
</UL>

<P><STRONG><a name="[295d35c]"></a>B_LUX_RecvACK</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, blux_v30b.o(i.B_LUX_RecvACK))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = B_LUX_RecvACK &rArr; B_LUX_Delay5us
</UL>
<BR>[Calls]<UL><LI><a href="#[295d44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;B_LUX_Delay5us
</UL>
<BR>[Called By]<UL><LI><a href="#[295d2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;B_LUX_SendByte
</UL>

<P><STRONG><a name="[295d320]"></a>B_LUX_RecvByte</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, blux_v30b.o(i.B_LUX_RecvByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = B_LUX_RecvByte &rArr; B_LUX_Delay5us
</UL>
<BR>[Calls]<UL><LI><a href="#[295d44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;B_LUX_Delay5us
</UL>
<BR>[Called By]<UL><LI><a href="#[295d410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;B_LUX_GetLux
</UL>

<P><STRONG><a name="[295d2e4]"></a>B_LUX_SendACK</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, blux_v30b.o(i.B_LUX_SendACK))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = B_LUX_SendACK &rArr; B_LUX_Delay5us
</UL>
<BR>[Calls]<UL><LI><a href="#[295d44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;B_LUX_Delay5us
</UL>
<BR>[Called By]<UL><LI><a href="#[295d410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;B_LUX_GetLux
</UL>

<P><STRONG><a name="[295d2a8]"></a>B_LUX_SendByte</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, blux_v30b.o(i.B_LUX_SendByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = B_LUX_SendByte &rArr; B_LUX_RecvACK &rArr; B_LUX_Delay5us
</UL>
<BR>[Calls]<UL><LI><a href="#[295d35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;B_LUX_RecvACK
<LI><a href="#[295d44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;B_LUX_Delay5us
</UL>
<BR>[Called By]<UL><LI><a href="#[295d410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;B_LUX_GetLux
</UL>

<P><STRONG><a name="[295d230]"></a>B_LUX_Start</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, blux_v30b.o(i.B_LUX_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = B_LUX_Start &rArr; B_LUX_Delay5us
</UL>
<BR>[Calls]<UL><LI><a href="#[295d44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;B_LUX_Delay5us
</UL>
<BR>[Called By]<UL><LI><a href="#[295d410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;B_LUX_GetLux
</UL>

<P><STRONG><a name="[295d1f4]"></a>B_LUX_Stop</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, blux_v30b.o(i.B_LUX_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = B_LUX_Stop &rArr; B_LUX_Delay5us
</UL>
<BR>[Calls]<UL><LI><a href="#[295d44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;B_LUX_Delay5us
</UL>
<BR>[Called By]<UL><LI><a href="#[295d410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;B_LUX_GetLux
</UL>

<P><STRONG><a name="[295d1b8]"></a>B_LUX_delay_nms</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, blux_v30b.o(i.B_LUX_delay_nms))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = B_LUX_delay_nms
</UL>
<BR>[Calls]<UL><LI><a href="#[1e937f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvSYS_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[295d410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;B_LUX_GetLux
</UL>

<P><STRONG><a name="[1e93700]"></a>Blux_v3bPoll</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, blux_v30b.o(i.Blux_v3bPoll))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = Blux_v3bPoll &rArr; B_LUX_GetLux &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[295d410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;B_LUX_GetLux
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9373c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[29f8dec]"></a>BoardInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sx12xxeiger.o(i.BoardInit))
<BR><BR>[Called By]<UL><LI><a href="#[1e932c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loraInit
</UL>

<P><STRONG><a name="[1e90ab4]"></a>CLK_EnableModuleClock</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, clk.o(i.CLK_EnableModuleClock))
<BR><BR>[Called By]<UL><LI><a href="#[1e90b2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortSerialInit
<LI><a href="#[28b0644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x3THPortSerialInit
</UL>

<P><STRONG><a name="[1e90a78]"></a>CLK_SetModuleClock</STRONG> (Thumb, 88 bytes, Stack size 20 bytes, clk.o(i.CLK_SetModuleClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CLK_SetModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[1e90b2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortSerialInit
<LI><a href="#[28b0644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x3THPortSerialInit
</UL>

<P><STRONG><a name="[1e936c4]"></a>CLK_WaitClockReady</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, clk.o(i.CLK_WaitClockReady))
<BR><BR>[Called By]<UL><LI><a href="#[1e937b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
</UL>

<P><STRONG><a name="[28add40]"></a>Check_si4432_HW</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, si4432.o(i.Check_si4432_HW))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Check_si4432_HW &rArr; spi_rw
</UL>
<BR>[Calls]<UL><LI><a href="#[28adb24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_rw
</UL>
<BR>[Called By]<UL><LI><a href="#[1e934a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Si4432Thread
</UL>

<P><STRONG><a name="[1e93688]"></a>Co2EventPoll</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, uart3th.o(i.Co2EventPoll))
<BR><BR>[Called By]<UL><LI><a href="#[1e9373c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1e9364c]"></a>Co2Init</STRONG> (Thumb, 62 bytes, Stack size 40 bytes, uart3th.o(i.Co2Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = Co2Init &rArr; x3THPortSerialInit &rArr; UART_Open &rArr; CLK_GetPLLClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[28b0554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x3THPortTimersInit
<LI><a href="#[28b0644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x3THPortSerialInit
<LI><a href="#[28b5900]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9373c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1e93610]"></a>Co2SendCmd</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, uart3th.o(i.Co2SendCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Co2SendCmd &rArr; UART_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[28b5900]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9373c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1e937f0]"></a>DrvSYS_Delay</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, main.o(i.DrvSYS_Delay))
<BR><BR>[Called By]<UL><LI><a href="#[1e93304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initsi4432
<LI><a href="#[28adae8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_data
<LI><a href="#[295d1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;B_LUX_delay_nms
<LI><a href="#[295d44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;B_LUX_Delay5us
</UL>

<P><STRONG><a name="[1e92c74]"></a>EnterCriticalSection</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, port.o(i.EnterCriticalSection))
<BR><BR>[Called By]<UL><LI><a href="#[1e8c194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peBTFrameSendCur
<LI><a href="#[1e8c1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUStop
<LI><a href="#[1e8c20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUStart
<LI><a href="#[1e8c248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUSend
<LI><a href="#[1e8c284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUReceive
<LI><a href="#[1e8c2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUInit
<LI><a href="#[1e90b2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortSerialInit
<LI><a href="#[28b0644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x3THPortSerialInit
</UL>

<P><STRONG><a name="[1e92c38]"></a>ExitCriticalSection</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, port.o(i.ExitCriticalSection))
<BR><BR>[Called By]<UL><LI><a href="#[1e8c194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peBTFrameSendCur
<LI><a href="#[1e8c1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUStop
<LI><a href="#[1e8c20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUStart
<LI><a href="#[1e8c248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUSend
<LI><a href="#[1e8c284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUReceive
<LI><a href="#[1e8c2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUInit
<LI><a href="#[1e90b2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortSerialInit
<LI><a href="#[28b0644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x3THPortSerialInit
</UL>

<P><STRONG><a name="[1ef6a00]"></a>FMC_Close</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fmc.o(i.FMC_Close))
<BR><BR>[Called By]<UL><LI><a href="#[1e93520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSlaveAddr
<LI><a href="#[295bb38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveUserSlaveRfChl
<LI><a href="#[295bb74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveUserSlaveAddr
</UL>

<P><STRONG><a name="[295bc28]"></a>FMC_EraseData</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, fmc_data_flash.o(i.FMC_EraseData))
<BR><BR>[Called By]<UL><LI><a href="#[295bb38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveUserSlaveRfChl
<LI><a href="#[295bb74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveUserSlaveAddr
</UL>

<P><STRONG><a name="[1ef6820]"></a>FMC_Open</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fmc.o(i.FMC_Open))
<BR><BR>[Called By]<UL><LI><a href="#[1e93520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSlaveAddr
<LI><a href="#[295bb38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveUserSlaveRfChl
<LI><a href="#[295bb74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveUserSlaveAddr
</UL>

<P><STRONG><a name="[295bbec]"></a>FMC_ReadData</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fmc_data_flash.o(i.FMC_ReadData))
<BR><BR>[Called By]<UL><LI><a href="#[1e93520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSlaveAddr
<LI><a href="#[295bb38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveUserSlaveRfChl
<LI><a href="#[295bb74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveUserSlaveAddr
</UL>

<P><STRONG><a name="[295bbb0]"></a>FMC_WriteData</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fmc_data_flash.o(i.FMC_WriteData))
<BR><BR>[Called By]<UL><LI><a href="#[295bb38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveUserSlaveRfChl
<LI><a href="#[295bb74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveUserSlaveAddr
</UL>

<P><STRONG><a name="[1ef5dd0]"></a>GPIO_SetMode</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, gpio.o(i.GPIO_SetMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_SetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[1e93304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initsi4432
<LI><a href="#[1e9355c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitBLUX_V30
<LI><a href="#[2958820]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276InitIo
</UL>

<P><STRONG><a name="[1e93598]"></a>HWRealyInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, realyctrl.o(i.HWRealyInit))
<BR><BR>[Called By]<UL><LI><a href="#[1e9373c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[295d140]"></a>I2C1_IRQHandler</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, blux_v30b.o(i.I2C1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef3fd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ClearTimeoutFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[1ef3fd0]"></a>I2C_ClearTimeoutFlag</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, i2c.o(i.I2C_ClearTimeoutFlag))
<BR><BR>[Called By]<UL><LI><a href="#[295d140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_IRQHandler
</UL>

<P><STRONG><a name="[1e9355c]"></a>InitBLUX_V30</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, blux_v30b.o(i.InitBLUX_V30))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = InitBLUX_V30 &rArr; GPIO_SetMode
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef5dd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9373c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1e93520]"></a>InitSlaveAddr</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, fmc_data_flash.o(i.InitSlaveAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = InitSlaveAddr
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef6820]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Open
<LI><a href="#[1ef6a00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Close
<LI><a href="#[295bbec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_ReadData
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9373c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[28add04]"></a>ProcesBoadcast</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, si4432.o(i.ProcesBoadcast))
<BR><BR>[Called By]<UL><LI><a href="#[1e934a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Si4432Thread
</UL>

<P><STRONG><a name="[28adcc8]"></a>ProcesMyselfFun</STRONG> (Thumb, 126 bytes, Stack size 12 bytes, si4432.o(i.ProcesMyselfFun))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ProcesMyselfFun
</UL>
<BR>[Called By]<UL><LI><a href="#[1e934a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Si4432Thread
</UL>

<P><STRONG><a name="[28adc8c]"></a>RE_RSSI</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, si4432.o(i.RE_RSSI))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RE_RSSI &rArr; spi_rw
</UL>
<BR>[Calls]<UL><LI><a href="#[28adb24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_rw
</UL>
<BR>[Called By]<UL><LI><a href="#[1e934a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Si4432Thread
<LI><a href="#[28adb9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_rec_data
</UL>

<P><STRONG><a name="[295b19c]"></a>RadioDriverInit</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, radio.o(i.RadioDriverInit))
<BR><BR>[Called By]<UL><LI><a href="#[1e932c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loraInit
</UL>

<P><STRONG><a name="[28adc50]"></a>SI4432_init</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, si4432.o(i.SI4432_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SI4432_init &rArr; Si4432RegisterSetV26 &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[28adb24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_rw
<LI><a href="#[28adbd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clr_interruput_si4432
<LI><a href="#[28adc14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Si4432RegisterSetV26
</UL>
<BR>[Called By]<UL><LI><a href="#[1e93304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initsi4432
<LI><a href="#[28adae8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_data
</UL>

<P><STRONG><a name="[2955df0]"></a>SX1276FskGetPacketPayloadSize</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, sx1276-fsk.o(i.SX1276FskGetPacketPayloadSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SX1276FskGetPacketPayloadSize
</UL>
<BR>[Called By]<UL><LI><a href="#[2958988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskProcess
</UL>

<P><STRONG><a name="[29589c4]"></a>SX1276FskGetRxPacket</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, sx1276-fsk.o(i.SX1276FskGetRxPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SX1276FskGetRxPacket
</UL>
<BR>[Calls]<UL><LI><a href="#[29f5930]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[295b160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276GetRxPacket
</UL>

<P><STRONG><a name="[2958988]"></a>SX1276FskProcess</STRONG> (Thumb, 1642 bytes, Stack size 72 bytes, sx1276-fsk.o(i.SX1276FskProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = SX1276FskProcess &rArr; SX1276FskReadAfc &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1efc748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[2955724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[295579c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[29557d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[2955814]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[2955850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[2955940]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteFifo
<LI><a href="#[295597c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadFifo
<LI><a href="#[29559b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadDio4
<LI><a href="#[29559f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadDio3
<LI><a href="#[2955a30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadDio2
<LI><a href="#[2955a6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadDio1
<LI><a href="#[2955aa8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadDio0
<LI><a href="#[2955d78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskReadAfc
<LI><a href="#[2955df0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskGetPacketPayloadSize
<LI><a href="#[29583e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteBuffer
<LI><a href="#[2958424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[29588d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskSetOpMode
<LI><a href="#[2958910]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskReadRxGain
<LI><a href="#[295894c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskReadRssi
<LI><a href="#[295d050]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[29f5714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[29f5e1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;round
</UL>
<BR>[Called By]<UL><LI><a href="#[295b0e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Process
</UL>

<P><STRONG><a name="[2955d78]"></a>SX1276FskReadAfc</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, sx1276-fsk.o(i.SX1276FskReadAfc))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = SX1276FskReadAfc &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[295579c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[295588c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[295849c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadBuffer
<LI><a href="#[295d050]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[2958988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskProcess
</UL>

<P><STRONG><a name="[295894c]"></a>SX1276FskReadRssi</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, sx1276-fsk.o(i.SX1276FskReadRssi))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = SX1276FskReadRssi &rArr; __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2955724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[29557d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[2955ae4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
</UL>
<BR>[Called By]<UL><LI><a href="#[2958988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskProcess
</UL>

<P><STRONG><a name="[2958910]"></a>SX1276FskReadRxGain</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, sx1276-fsk.o(i.SX1276FskReadRxGain))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SX1276FskReadRxGain &rArr; SX1276Read &rArr; SX1276ReadBuffer &rArr; SpiInOut
</UL>
<BR>[Calls]<UL><LI><a href="#[2955ae4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
</UL>
<BR>[Called By]<UL><LI><a href="#[2958988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskProcess
</UL>

<P><STRONG><a name="[29588d4]"></a>SX1276FskSetOpMode</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, sx1276-fsk.o(i.SX1276FskSetOpMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SX1276FskSetOpMode &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SpiInOut
</UL>
<BR>[Calls]<UL><LI><a href="#[2955904]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteRxTx
<LI><a href="#[2958424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
</UL>
<BR>[Called By]<UL><LI><a href="#[2958988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskProcess
</UL>

<P><STRONG><a name="[2958898]"></a>SX1276FskSetRFState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sx1276-fsk.o(i.SX1276FskSetRFState))
<BR><BR>[Called By]<UL><LI><a href="#[295b034]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276StartRx
</UL>

<P><STRONG><a name="[295885c]"></a>SX1276FskSetTxPacket</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, sx1276-fsk.o(i.SX1276FskSetTxPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SX1276FskSetTxPacket
</UL>
<BR>[Calls]<UL><LI><a href="#[29f5930]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[295b070]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxPacket
</UL>

<P><STRONG><a name="[295b160]"></a>SX1276GetRxPacket</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, sx1276.o(i.SX1276GetRxPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SX1276GetRxPacket &rArr; SX1276LoRaGetRxPacket
</UL>
<BR>[Calls]<UL><LI><a href="#[295867c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaGetRxPacket
<LI><a href="#[29589c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskGetRxPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9328c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loramain
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(i.RadioDriverInit)
</UL>
<P><STRONG><a name="[295b124]"></a>SX1276Init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, sx1276.o(i.SX1276Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SX1276Init &rArr; SX1276LoRaInit &rArr; SX1276LoRaSetRFFrequency &rArr; __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2958640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaInit
<LI><a href="#[2958820]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276InitIo
<LI><a href="#[2958be0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetLoRaOn
<LI><a href="#[295b0ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Reset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(i.RadioDriverInit)
</UL>
<P><STRONG><a name="[2958820]"></a>SX1276InitIo</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, sx1276-hal.o(i.SX1276InitIo))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SX1276InitIo &rArr; GPIO_SetMode
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef5dd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[295b124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Init
</UL>

<P><STRONG><a name="[295867c]"></a>SX1276LoRaGetRxPacket</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, sx1276-lora.o(i.SX1276LoRaGetRxPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SX1276LoRaGetRxPacket
</UL>
<BR>[Calls]<UL><LI><a href="#[29f5930]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[295b160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276GetRxPacket
</UL>

<P><STRONG><a name="[2958640]"></a>SX1276LoRaInit</STRONG> (Thumb, 180 bytes, Stack size 8 bytes, sx1276-lora.o(i.SX1276LoRaInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = SX1276LoRaInit &rArr; SX1276LoRaSetRFFrequency &rArr; __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2950288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetSymbTimeout
<LI><a href="#[29502c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetSpreadingFactor
<LI><a href="#[2950300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetSignalBandwidth
<LI><a href="#[295033c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetRFPower
<LI><a href="#[2950378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetRFFrequency
<LI><a href="#[29503b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetPayloadLength
<LI><a href="#[29503f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetPacketCrcOn
<LI><a href="#[295042c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetPa20dBm
<LI><a href="#[2950468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetPAOutput
<LI><a href="#[29504a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetLowDatarateOptimize
<LI><a href="#[29504e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetImplicitHeaderOn
<LI><a href="#[295051c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetErrorCoding
<LI><a href="#[2950594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetDefaults
<LI><a href="#[29583e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteBuffer
<LI><a href="#[295849c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadBuffer
<LI><a href="#[2958550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetOpMode
</UL>
<BR>[Called By]<UL><LI><a href="#[295b124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Init
</UL>

<P><STRONG><a name="[2958604]"></a>SX1276LoRaProcess</STRONG> (Thumb, 1658 bytes, Stack size 32 bytes, sx1276-lora.o(i.SX1276LoRaProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = SX1276LoRaProcess &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1efc748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[2950378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetRFFrequency
<LI><a href="#[2955724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[295579c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[2955814]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[2955940]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteFifo
<LI><a href="#[295597c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadFifo
<LI><a href="#[29559b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadDio4
<LI><a href="#[29559f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadDio3
<LI><a href="#[2955ae4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[29583e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteBuffer
<LI><a href="#[2958424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[2958550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetOpMode
<LI><a href="#[295858c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaReadRxGain
<LI><a href="#[295d050]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[29f5714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[295b0e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Process
</UL>

<P><STRONG><a name="[295858c]"></a>SX1276LoRaReadRxGain</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, sx1276-lora.o(i.SX1276LoRaReadRxGain))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SX1276LoRaReadRxGain &rArr; SX1276Read &rArr; SX1276ReadBuffer &rArr; SpiInOut
</UL>
<BR>[Calls]<UL><LI><a href="#[2955ae4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
</UL>
<BR>[Called By]<UL><LI><a href="#[2958604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaProcess
</UL>

<P><STRONG><a name="[2950594]"></a>SX1276LoRaSetDefaults</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, sx1276-lora.o(i.SX1276LoRaSetDefaults))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SX1276LoRaSetDefaults &rArr; SX1276Read &rArr; SX1276ReadBuffer &rArr; SpiInOut
</UL>
<BR>[Calls]<UL><LI><a href="#[2955ae4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
</UL>
<BR>[Called By]<UL><LI><a href="#[2958640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaInit
</UL>

<P><STRONG><a name="[295051c]"></a>SX1276LoRaSetErrorCoding</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, sx1276-loramisc.o(i.SX1276LoRaSetErrorCoding))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = SX1276LoRaSetErrorCoding &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SpiInOut
</UL>
<BR>[Calls]<UL><LI><a href="#[2955ae4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[2958424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
</UL>
<BR>[Called By]<UL><LI><a href="#[2958640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaInit
</UL>

<P><STRONG><a name="[29504e0]"></a>SX1276LoRaSetImplicitHeaderOn</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, sx1276-loramisc.o(i.SX1276LoRaSetImplicitHeaderOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = SX1276LoRaSetImplicitHeaderOn &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SpiInOut
</UL>
<BR>[Calls]<UL><LI><a href="#[2955ae4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[2958424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
</UL>
<BR>[Called By]<UL><LI><a href="#[2958640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaInit
</UL>

<P><STRONG><a name="[29504a4]"></a>SX1276LoRaSetLowDatarateOptimize</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, sx1276-loramisc.o(i.SX1276LoRaSetLowDatarateOptimize))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = SX1276LoRaSetLowDatarateOptimize &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SpiInOut
</UL>
<BR>[Calls]<UL><LI><a href="#[2955ae4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[2958424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
</UL>
<BR>[Called By]<UL><LI><a href="#[2958640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaInit
</UL>

<P><STRONG><a name="[29f9d28]"></a>SX1276LoRaSetNbTrigPeaks</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, sx1276-loramisc.o(i.SX1276LoRaSetNbTrigPeaks))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = SX1276LoRaSetNbTrigPeaks &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SpiInOut
</UL>
<BR>[Calls]<UL><LI><a href="#[2955ae4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[2958424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
</UL>
<BR>[Called By]<UL><LI><a href="#[29502c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetSpreadingFactor
</UL>

<P><STRONG><a name="[2958550]"></a>SX1276LoRaSetOpMode</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, sx1276-lora.o(i.SX1276LoRaSetOpMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SX1276LoRaSetOpMode &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SpiInOut
</UL>
<BR>[Calls]<UL><LI><a href="#[2955904]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteRxTx
<LI><a href="#[2958424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
</UL>
<BR>[Called By]<UL><LI><a href="#[2958604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaProcess
<LI><a href="#[2958640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaInit
<LI><a href="#[2958be0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetLoRaOn
</UL>

<P><STRONG><a name="[2950468]"></a>SX1276LoRaSetPAOutput</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, sx1276-loramisc.o(i.SX1276LoRaSetPAOutput))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = SX1276LoRaSetPAOutput &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SpiInOut
</UL>
<BR>[Calls]<UL><LI><a href="#[2955ae4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[2958424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
</UL>
<BR>[Called By]<UL><LI><a href="#[2958640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaInit
</UL>

<P><STRONG><a name="[295042c]"></a>SX1276LoRaSetPa20dBm</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, sx1276-loramisc.o(i.SX1276LoRaSetPa20dBm))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = SX1276LoRaSetPa20dBm &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SpiInOut
</UL>
<BR>[Calls]<UL><LI><a href="#[2955ae4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[2958424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
</UL>
<BR>[Called By]<UL><LI><a href="#[2958640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaInit
</UL>

<P><STRONG><a name="[29503f0]"></a>SX1276LoRaSetPacketCrcOn</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, sx1276-loramisc.o(i.SX1276LoRaSetPacketCrcOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = SX1276LoRaSetPacketCrcOn &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SpiInOut
</UL>
<BR>[Calls]<UL><LI><a href="#[2955ae4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[2958424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
</UL>
<BR>[Called By]<UL><LI><a href="#[2958640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaInit
</UL>

<P><STRONG><a name="[29503b4]"></a>SX1276LoRaSetPayloadLength</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, sx1276-loramisc.o(i.SX1276LoRaSetPayloadLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = SX1276LoRaSetPayloadLength &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SpiInOut
</UL>
<BR>[Calls]<UL><LI><a href="#[2958424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
</UL>
<BR>[Called By]<UL><LI><a href="#[2958640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaInit
</UL>

<P><STRONG><a name="[2950378]"></a>SX1276LoRaSetRFFrequency</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, sx1276-loramisc.o(i.SX1276LoRaSetRFFrequency))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SX1276LoRaSetRFFrequency &rArr; __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2955724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[29557d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[2955850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[29583e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[2958604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaProcess
<LI><a href="#[2958640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaInit
</UL>

<P><STRONG><a name="[295033c]"></a>SX1276LoRaSetRFPower</STRONG> (Thumb, 244 bytes, Stack size 8 bytes, sx1276-loramisc.o(i.SX1276LoRaSetRFPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = SX1276LoRaSetRFPower &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SpiInOut
</UL>
<BR>[Calls]<UL><LI><a href="#[2955ae4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[2958424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
</UL>
<BR>[Called By]<UL><LI><a href="#[2958640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaInit
</UL>

<P><STRONG><a name="[2958514]"></a>SX1276LoRaSetRFState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sx1276-lora.o(i.SX1276LoRaSetRFState))
<BR><BR>[Called By]<UL><LI><a href="#[295b034]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276StartRx
</UL>

<P><STRONG><a name="[2950300]"></a>SX1276LoRaSetSignalBandwidth</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, sx1276-loramisc.o(i.SX1276LoRaSetSignalBandwidth))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = SX1276LoRaSetSignalBandwidth &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SpiInOut
</UL>
<BR>[Calls]<UL><LI><a href="#[2955ae4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[2958424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
</UL>
<BR>[Called By]<UL><LI><a href="#[2958640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaInit
</UL>

<P><STRONG><a name="[29502c4]"></a>SX1276LoRaSetSpreadingFactor</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, sx1276-loramisc.o(i.SX1276LoRaSetSpreadingFactor))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SX1276LoRaSetSpreadingFactor &rArr; SX1276LoRaSetNbTrigPeaks &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SpiInOut
</UL>
<BR>[Calls]<UL><LI><a href="#[2955ae4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[2958424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[29f9d28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetNbTrigPeaks
</UL>
<BR>[Called By]<UL><LI><a href="#[2958640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaInit
</UL>

<P><STRONG><a name="[2950288]"></a>SX1276LoRaSetSymbTimeout</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, sx1276-loramisc.o(i.SX1276LoRaSetSymbTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SX1276LoRaSetSymbTimeout &rArr; SX1276WriteBuffer &rArr; SpiInOut
</UL>
<BR>[Calls]<UL><LI><a href="#[29583e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteBuffer
<LI><a href="#[295849c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[2958640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaInit
</UL>

<P><STRONG><a name="[29584d8]"></a>SX1276LoRaSetTxPacket</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, sx1276-lora.o(i.SX1276LoRaSetTxPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SX1276LoRaSetTxPacket
</UL>
<BR>[Calls]<UL><LI><a href="#[29f5930]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[295b070]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxPacket
</UL>

<P><STRONG><a name="[295b0e8]"></a>SX1276Process</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, sx1276.o(i.SX1276Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = SX1276Process &rArr; SX1276FskProcess &rArr; SX1276FskReadAfc &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2958604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaProcess
<LI><a href="#[2958988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskProcess
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(i.RadioDriverInit)
</UL>
<P><STRONG><a name="[2955ae4]"></a>SX1276Read</STRONG> (Thumb, 18 bytes, Stack size 12 bytes, sx1276-hal.o(i.SX1276Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SX1276Read &rArr; SX1276ReadBuffer &rArr; SpiInOut
</UL>
<BR>[Calls]<UL><LI><a href="#[295849c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[29502c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetSpreadingFactor
<LI><a href="#[2950300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetSignalBandwidth
<LI><a href="#[295033c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetRFPower
<LI><a href="#[29503f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetPacketCrcOn
<LI><a href="#[295042c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetPa20dBm
<LI><a href="#[2950468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetPAOutput
<LI><a href="#[29504a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetLowDatarateOptimize
<LI><a href="#[29504e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetImplicitHeaderOn
<LI><a href="#[295051c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetErrorCoding
<LI><a href="#[2950594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetDefaults
<LI><a href="#[295858c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaReadRxGain
<LI><a href="#[2958604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaProcess
<LI><a href="#[2958910]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskReadRxGain
<LI><a href="#[295894c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskReadRssi
<LI><a href="#[29f9d28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetNbTrigPeaks
</UL>

<P><STRONG><a name="[295849c]"></a>SX1276ReadBuffer</STRONG> (Thumb, 62 bytes, Stack size 20 bytes, sx1276-hal.o(i.SX1276ReadBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SX1276ReadBuffer &rArr; SpiInOut
</UL>
<BR>[Calls]<UL><LI><a href="#[29f6830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiInOut
</UL>
<BR>[Called By]<UL><LI><a href="#[2950288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetSymbTimeout
<LI><a href="#[295597c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadFifo
<LI><a href="#[2955ae4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[2955d78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskReadAfc
<LI><a href="#[2958640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaInit
<LI><a href="#[2958be0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetLoRaOn
</UL>

<P><STRONG><a name="[2955aa8]"></a>SX1276ReadDio0</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sx1276-hal.o(i.SX1276ReadDio0))
<BR><BR>[Called By]<UL><LI><a href="#[2958988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskProcess
</UL>

<P><STRONG><a name="[2955a6c]"></a>SX1276ReadDio1</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sx1276-hal.o(i.SX1276ReadDio1))
<BR><BR>[Called By]<UL><LI><a href="#[2958988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskProcess
</UL>

<P><STRONG><a name="[2955a30]"></a>SX1276ReadDio2</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sx1276-hal.o(i.SX1276ReadDio2))
<BR><BR>[Called By]<UL><LI><a href="#[2958988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskProcess
</UL>

<P><STRONG><a name="[29559f4]"></a>SX1276ReadDio3</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sx1276-hal.o(i.SX1276ReadDio3))
<BR><BR>[Called By]<UL><LI><a href="#[2958604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaProcess
<LI><a href="#[2958988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskProcess
</UL>

<P><STRONG><a name="[29559b8]"></a>SX1276ReadDio4</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sx1276-hal.o(i.SX1276ReadDio4))
<BR><BR>[Called By]<UL><LI><a href="#[2958604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaProcess
<LI><a href="#[2958988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskProcess
</UL>

<P><STRONG><a name="[295597c]"></a>SX1276ReadFifo</STRONG> (Thumb, 18 bytes, Stack size 12 bytes, sx1276-hal.o(i.SX1276ReadFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SX1276ReadFifo &rArr; SX1276ReadBuffer &rArr; SpiInOut
</UL>
<BR>[Calls]<UL><LI><a href="#[295849c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[2958604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaProcess
<LI><a href="#[2958988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskProcess
</UL>

<P><STRONG><a name="[295b0ac]"></a>SX1276Reset</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, sx1276.o(i.SX1276Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SX1276Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[2958460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetReset
</UL>
<BR>[Called By]<UL><LI><a href="#[295b124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(i.RadioDriverInit)
</UL>
<P><STRONG><a name="[2958be0]"></a>SX1276SetLoRaOn</STRONG> (Thumb, 166 bytes, Stack size 8 bytes, sx1276.o(i.SX1276SetLoRaOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = SX1276SetLoRaOn &rArr; SX1276LoRaSetOpMode &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SpiInOut
</UL>
<BR>[Calls]<UL><LI><a href="#[29583e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteBuffer
<LI><a href="#[2958424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[295849c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadBuffer
<LI><a href="#[2958550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetOpMode
</UL>
<BR>[Called By]<UL><LI><a href="#[295b124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Init
</UL>

<P><STRONG><a name="[2958460]"></a>SX1276SetReset</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sx1276-hal.o(i.SX1276SetReset))
<BR><BR>[Called By]<UL><LI><a href="#[295b0ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Reset
</UL>

<P><STRONG><a name="[295b070]"></a>SX1276SetTxPacket</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, sx1276.o(i.SX1276SetTxPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SX1276SetTxPacket &rArr; SX1276LoRaSetTxPacket
</UL>
<BR>[Calls]<UL><LI><a href="#[29584d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetTxPacket
<LI><a href="#[295885c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskSetTxPacket
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(i.RadioDriverInit)
</UL>
<P><STRONG><a name="[295b034]"></a>SX1276StartRx</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, sx1276.o(i.SX1276StartRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SX1276StartRx
</UL>
<BR>[Calls]<UL><LI><a href="#[2958514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetRFState
<LI><a href="#[2958898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskSetRFState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(i.RadioDriverInit)
</UL>
<P><STRONG><a name="[2958424]"></a>SX1276Write</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, sx1276-hal.o(i.SX1276Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = SX1276Write &rArr; SX1276WriteBuffer &rArr; SpiInOut
</UL>
<BR>[Calls]<UL><LI><a href="#[29583e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[29502c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetSpreadingFactor
<LI><a href="#[2950300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetSignalBandwidth
<LI><a href="#[295033c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetRFPower
<LI><a href="#[29503b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetPayloadLength
<LI><a href="#[29503f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetPacketCrcOn
<LI><a href="#[295042c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetPa20dBm
<LI><a href="#[2950468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetPAOutput
<LI><a href="#[29504a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetLowDatarateOptimize
<LI><a href="#[29504e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetImplicitHeaderOn
<LI><a href="#[295051c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetErrorCoding
<LI><a href="#[2958550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetOpMode
<LI><a href="#[2958604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaProcess
<LI><a href="#[29588d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskSetOpMode
<LI><a href="#[2958988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskProcess
<LI><a href="#[2958be0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetLoRaOn
<LI><a href="#[29f9d28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetNbTrigPeaks
</UL>

<P><STRONG><a name="[29583e8]"></a>SX1276WriteBuffer</STRONG> (Thumb, 64 bytes, Stack size 20 bytes, sx1276-hal.o(i.SX1276WriteBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SX1276WriteBuffer &rArr; SpiInOut
</UL>
<BR>[Calls]<UL><LI><a href="#[29f6830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiInOut
</UL>
<BR>[Called By]<UL><LI><a href="#[2950288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetSymbTimeout
<LI><a href="#[2950378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetRFFrequency
<LI><a href="#[2955940]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteFifo
<LI><a href="#[2958424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[2958604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaProcess
<LI><a href="#[2958640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaInit
<LI><a href="#[2958988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskProcess
<LI><a href="#[2958be0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetLoRaOn
</UL>

<P><STRONG><a name="[2955940]"></a>SX1276WriteFifo</STRONG> (Thumb, 18 bytes, Stack size 12 bytes, sx1276-hal.o(i.SX1276WriteFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SX1276WriteFifo &rArr; SX1276WriteBuffer &rArr; SpiInOut
</UL>
<BR>[Calls]<UL><LI><a href="#[29583e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[2958604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaProcess
<LI><a href="#[2958988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskProcess
</UL>

<P><STRONG><a name="[2955904]"></a>SX1276WriteRxTx</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sx1276-hal.o(i.SX1276WriteRxTx))
<BR><BR>[Called By]<UL><LI><a href="#[2958550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetOpMode
<LI><a href="#[29588d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskSetOpMode
</UL>

<P><STRONG><a name="[1e937b4]"></a>SYS_Init</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, main.o(i.SYS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = SYS_Init &rArr; SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1e93430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[1e936c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_WaitClockReady
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9373c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[28b8b64]"></a>SYS_ResetCPU</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, sys.o(i.SYS_ResetCPU))
<BR><BR>[Called By]<UL><LI><a href="#[295bb38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveUserSlaveRfChl
<LI><a href="#[295bb74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveUserSlaveAddr
</UL>

<P><STRONG><a name="[1e934e4]"></a>SYS_ResetModule</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, sys.o(i.SYS_ResetModule))
<BR><BR>[Called By]<UL><LI><a href="#[1e90b2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortSerialInit
<LI><a href="#[28b0644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x3THPortSerialInit
</UL>

<P><STRONG><a name="[295bb74]"></a>SaveUserSlaveAddr</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, fmc_data_flash.o(i.SaveUserSlaveAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SaveUserSlaveAddr
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef6820]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Open
<LI><a href="#[1ef6a00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Close
<LI><a href="#[28b8b64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ResetCPU
<LI><a href="#[295bbb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_WriteData
<LI><a href="#[295bbec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_ReadData
<LI><a href="#[295bc28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_EraseData
<LI><a href="#[295bfe8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UnlockReg
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9346c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveAddrPoll
</UL>

<P><STRONG><a name="[295bb38]"></a>SaveUserSlaveRfChl</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, fmc_data_flash.o(i.SaveUserSlaveRfChl))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SaveUserSlaveRfChl
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef6820]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Open
<LI><a href="#[1ef6a00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Close
<LI><a href="#[28b8b64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ResetCPU
<LI><a href="#[295bbb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_WriteData
<LI><a href="#[295bbec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_ReadData
<LI><a href="#[295bc28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_EraseData
<LI><a href="#[295bfe8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UnlockReg
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9346c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveAddrPoll
</UL>

<P><STRONG><a name="[28adc14]"></a>Si4432RegisterSetV26</STRONG> (Thumb, 852 bytes, Stack size 8 bytes, si4432.o(i.Si4432RegisterSetV26))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Si4432RegisterSetV26 &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[1efc748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[28adb24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_rw
</UL>
<BR>[Called By]<UL><LI><a href="#[28adc50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4432_init
</UL>

<P><STRONG><a name="[1e934a8]"></a>Si4432Thread</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, si4432.o(i.Si4432Thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Si4432Thread &rArr; tx_data &rArr; SI4432_init &rArr; Si4432RegisterSetV26 &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[28adae8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_data
<LI><a href="#[28adb9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_rec_data
<LI><a href="#[28adc8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RE_RSSI
<LI><a href="#[28adcc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcesMyselfFun
<LI><a href="#[28add04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcesBoadcast
<LI><a href="#[28add40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_si4432_HW
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9373c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1e9346c]"></a>SlaveAddrPoll</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, fmc_data_flash.o(i.SlaveAddrPoll))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SlaveAddrPoll &rArr; SaveUserSlaveRfChl
</UL>
<BR>[Calls]<UL><LI><a href="#[295bb38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveUserSlaveRfChl
<LI><a href="#[295bb74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveUserSlaveAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9373c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[29f6830]"></a>SpiInOut</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, sx1276-hal.o(i.SpiInOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SpiInOut
</UL>
<BR>[Called By]<UL><LI><a href="#[29583e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteBuffer
<LI><a href="#[295849c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadBuffer
</UL>

<P><STRONG><a name="[1e93430]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, system_m051series.o(i.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[28b3a4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
<LI><a href="#[29f5a20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1e937b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
</UL>

<P><STRONG><a name="[28b4988]"></a>SystemInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_m051series.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(.text)
</UL>
<P><STRONG><a name="[28b7994]"></a>TIMER_GetModuleClock</STRONG> (Thumb, 110 bytes, Stack size 48 bytes, timer.o(i.TIMER_GetModuleClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TIMER_GetModuleClock
</UL>
<BR>[Calls]<UL><LI><a href="#[29f58f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8f560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Open
</UL>

<P><STRONG><a name="[1e8f560]"></a>TIMER_Open</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, timer.o(i.TIMER_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = TIMER_Open &rArr; TIMER_GetModuleClock
</UL>
<BR>[Calls]<UL><LI><a href="#[28b7994]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_GetModuleClock
<LI><a href="#[29f5a20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8f59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortTimersInit
<LI><a href="#[28b0554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x3THPortTimersInit
</UL>

<P><STRONG><a name="[1e8f650]"></a>TMR1_IRQHandler</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, porttimer.o(i.TMR1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TMR1_IRQHandler &rArr; prvvTIMERExpiredISR
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8f95c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvvTIMERExpiredISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[28b06f8]"></a>TMR2_IRQHandler</STRONG> (Thumb, 108 bytes, Stack size 4 bytes, uart3th.o(i.TMR2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = TMR2_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[28b05cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x3THPortTimersDisable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[1e90c1c]"></a>UART0_IRQHandler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, portserial.o(i.UART0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART0_IRQHandler &rArr; prvvUARTTxReadyISR
</UL>
<BR>[Calls]<UL><LI><a href="#[1e912ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvvUARTTxReadyISR
<LI><a href="#[1e912e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvvUARTRxISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[28b06bc]"></a>UART1_IRQHandler</STRONG> (Thumb, 46 bytes, Stack size 4 bytes, uart3th.o(i.UART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = UART1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[28b0590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x3THPortTimersEnable
<LI><a href="#[28b0680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x3THPortSerialGetByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[1e933f4]"></a>UART_Open</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, uart.o(i.UART_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = UART_Open &rArr; CLK_GetPLLClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[28b5edc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
<LI><a href="#[29f5a20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1e90b2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortSerialInit
<LI><a href="#[28b0644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x3THPortSerialInit
</UL>

<P><STRONG><a name="[28b5900]"></a>UART_Write</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, uart.o(i.UART_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[1e93610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Co2SendCmd
<LI><a href="#[1e9364c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Co2Init
</UL>

<P><STRONG><a name="[29f299c]"></a>__ARM_clz</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, depilogue.o(i.__ARM_clz))
<BR><BR>[Called By]<UL><LI><a href="#[29f479c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[1efc748]"></a>__ARM_common_switch8</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, mb.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[1e93340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBPoll
<LI><a href="#[28adc14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Si4432RegisterSetV26
<LI><a href="#[2958604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaProcess
<LI><a href="#[2958988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskProcess
</UL>

<P><STRONG><a name="[29f21e0]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[29f21a4]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[29f2168]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[28adbd8]"></a>clr_interruput_si4432</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, si4432.o(i.clr_interruput_si4432))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = clr_interruput_si4432 &rArr; spi_rw
</UL>
<BR>[Calls]<UL><LI><a href="#[28adb24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_rw
</UL>
<BR>[Called By]<UL><LI><a href="#[28adb9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_rec_data
<LI><a href="#[28adc50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4432_init
</UL>

<P><STRONG><a name="[1e8dc4c]"></a>crc_ccitt</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, mbcrc.o(i.crc_ccitt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = crc_ccitt
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8c194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peBTFrameSendCur
</UL>

<P><STRONG><a name="[1e8ba50]"></a>eBTFuncReadHoldingRegister</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, btfunc.o(i.eBTFuncReadHoldingRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = eBTFuncReadHoldingRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8ba14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prveMBError2Exception
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(.data)
</UL>
<P><STRONG><a name="[1e933b8]"></a>eMBEnable</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, mb.o(i.eMBEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = eMBEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9373c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1e8b3c0]"></a>eMBFuncReadCoils</STRONG> (Thumb, 190 bytes, Stack size 40 bytes, mbfunccoils.o(i.eMBFuncReadCoils))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = eMBFuncReadCoils &rArr; eMBRegCoilsCB &rArr; xMBUtilSetBits
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8ba14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prveMBError2Exception
<LI><a href="#[1e8e408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegCoilsCB
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(.data)
</UL>
<P><STRONG><a name="[1e8aed4]"></a>eMBFuncReadDiscreteInputs</STRONG> (Thumb, 188 bytes, Stack size 40 bytes, mbfuncdisc.o(i.eMBFuncReadDiscreteInputs))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = eMBFuncReadDiscreteInputs &rArr; eMBRegDiscreteCB &rArr; xMBUtilSetBits
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8ba14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prveMBError2Exception
<LI><a href="#[1e8e3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegDiscreteCB
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(.data)
</UL>
<P><STRONG><a name="[1e8a718]"></a>eMBFuncReadHoldingRegister</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, mbfuncholding.o(i.eMBFuncReadHoldingRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = eMBFuncReadHoldingRegister &rArr; eMBRegHoldingCB
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8ba14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prveMBError2Exception
<LI><a href="#[1e8e390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegHoldingCB
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(.data)
</UL>
<P><STRONG><a name="[1e8a2e0]"></a>eMBFuncReadInputRegister</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, mbfuncinput.o(i.eMBFuncReadInputRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = eMBFuncReadInputRegister &rArr; eMBRegInputCB
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8ba14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prveMBError2Exception
<LI><a href="#[1e8e354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegInputCB
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(.data)
</UL>
<P><STRONG><a name="[1e8a6dc]"></a>eMBFuncReadWriteMultipleHoldingRegister</STRONG> (Thumb, 234 bytes, Stack size 48 bytes, mbfuncholding.o(i.eMBFuncReadWriteMultipleHoldingRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = eMBFuncReadWriteMultipleHoldingRegister &rArr; eMBRegHoldingCB
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8ba14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prveMBError2Exception
<LI><a href="#[1e8e390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegHoldingCB
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(.data)
</UL>
<P><STRONG><a name="[1e89a34]"></a>eMBFuncReportSlaveID</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, mbfuncother.o(i.eMBFuncReportSlaveID))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = eMBFuncReportSlaveID
</UL>
<BR>[Calls]<UL><LI><a href="#[29f5930]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(.data)
</UL>
<P><STRONG><a name="[1e8b384]"></a>eMBFuncWriteCoil</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, mbfunccoils.o(i.eMBFuncWriteCoil))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = eMBFuncWriteCoil &rArr; eMBRegCoilsCB &rArr; xMBUtilSetBits
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8ba14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prveMBError2Exception
<LI><a href="#[1e8e408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegCoilsCB
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(.data)
</UL>
<P><STRONG><a name="[1e8a6a0]"></a>eMBFuncWriteHoldingRegister</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, mbfuncholding.o(i.eMBFuncWriteHoldingRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = eMBFuncWriteHoldingRegister &rArr; eMBRegHoldingCB
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8ba14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prveMBError2Exception
<LI><a href="#[1e8e390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegHoldingCB
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(.data)
</UL>
<P><STRONG><a name="[1e8b348]"></a>eMBFuncWriteMultipleCoils</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, mbfunccoils.o(i.eMBFuncWriteMultipleCoils))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = eMBFuncWriteMultipleCoils &rArr; eMBRegCoilsCB &rArr; xMBUtilSetBits
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8ba14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prveMBError2Exception
<LI><a href="#[1e8e408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegCoilsCB
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(.data)
</UL>
<P><STRONG><a name="[1e8a664]"></a>eMBFuncWriteMultipleHoldingRegister</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, mbfuncholding.o(i.eMBFuncWriteMultipleHoldingRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = eMBFuncWriteMultipleHoldingRegister &rArr; eMBRegHoldingCB
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8ba14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prveMBError2Exception
<LI><a href="#[1e8e390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegHoldingCB
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(.data)
</UL>
<P><STRONG><a name="[1e9337c]"></a>eMBInit</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, mb.o(i.eMBInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = eMBInit &rArr; eMBRTUInit &rArr; xMBPortSerialInit &rArr; UART_Open &rArr; CLK_GetPLLClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8c2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUInit
<LI><a href="#[1e9229c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortEventInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9373c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1e93340]"></a>eMBPoll</STRONG> (Thumb, 522 bytes, Stack size 16 bytes, mb.o(i.eMBPoll))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = eMBPoll &rArr; peBTFrameSendCur &rArr; crc_ccitt
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8c194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peBTFrameSendCur
<LI><a href="#[1e92260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortEventPost
<LI><a href="#[1e922d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortEventGet
<LI><a href="#[1efc748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9373c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1e8c2c0]"></a>eMBRTUInit</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, mbrtu.o(i.eMBRTUInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = eMBRTUInit &rArr; xMBPortSerialInit &rArr; UART_Open &rArr; CLK_GetPLLClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8f59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortTimersInit
<LI><a href="#[1e90b2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortSerialInit
<LI><a href="#[1e92c38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExitCriticalSection
<LI><a href="#[1e92c74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterCriticalSection
<LI><a href="#[29f5a20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9337c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBInit
</UL>

<P><STRONG><a name="[1e8c284]"></a>eMBRTUReceive</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, mbrtu.o(i.eMBRTUReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = eMBRTUReceive &rArr; usMBCRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8dc10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usMBCRC16
<LI><a href="#[1e92c38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExitCriticalSection
<LI><a href="#[1e92c74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterCriticalSection
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(i.eMBInit)
</UL>
<P><STRONG><a name="[1e8c248]"></a>eMBRTUSend</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, mbrtu.o(i.eMBRTUSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = eMBRTUSend &rArr; usMBCRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8dc10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usMBCRC16
<LI><a href="#[1e90ba4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortSerialEnable
<LI><a href="#[1e92c38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExitCriticalSection
<LI><a href="#[1e92c74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterCriticalSection
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(i.eMBInit)
</UL>
<P><STRONG><a name="[1e8c20c]"></a>eMBRTUStart</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, mbrtu.o(i.eMBRTUStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = eMBRTUStart &rArr; vMBPortTimersEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8f5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortTimersEnable
<LI><a href="#[1e90ba4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortSerialEnable
<LI><a href="#[1e92c38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExitCriticalSection
<LI><a href="#[1e92c74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterCriticalSection
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(i.eMBInit)
</UL>
<P><STRONG><a name="[1e8c1d0]"></a>eMBRTUStop</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, mbrtu.o(i.eMBRTUStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = eMBRTUStop
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8f614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortTimersDisable
<LI><a href="#[1e90ba4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortSerialEnable
<LI><a href="#[1e92c38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExitCriticalSection
<LI><a href="#[1e92c74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterCriticalSection
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(i.eMBInit)
</UL>
<P><STRONG><a name="[1e8e408]"></a>eMBRegCoilsCB</STRONG> (Thumb, 332 bytes, Stack size 72 bytes, user_mb_app.o(i.eMBRegCoilsCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = eMBRegCoilsCB &rArr; xMBUtilSetBits
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8e264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBUtilSetBits
<LI><a href="#[1e8e2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBUtilGetBits
<LI><a href="#[1e8e2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBMasterGetCBRunInMasterMode
<LI><a href="#[1e8e318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ucMBMasterGetDestAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8b348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncWriteMultipleCoils
<LI><a href="#[1e8b384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncWriteCoil
<LI><a href="#[1e8b3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncReadCoils
</UL>

<P><STRONG><a name="[1e8e3cc]"></a>eMBRegDiscreteCB</STRONG> (Thumb, 318 bytes, Stack size 56 bytes, user_mb_app.o(i.eMBRegDiscreteCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = eMBRegDiscreteCB &rArr; xMBUtilSetBits
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8e264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBUtilSetBits
<LI><a href="#[1e8e2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBUtilGetBits
<LI><a href="#[1e8e2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBMasterGetCBRunInMasterMode
<LI><a href="#[1e8e318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ucMBMasterGetDestAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8aed4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncReadDiscreteInputs
</UL>

<P><STRONG><a name="[1e8e390]"></a>eMBRegHoldingCB</STRONG> (Thumb, 176 bytes, Stack size 48 bytes, user_mb_app.o(i.eMBRegHoldingCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = eMBRegHoldingCB
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8e2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBMasterGetCBRunInMasterMode
<LI><a href="#[1e8e318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ucMBMasterGetDestAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8a664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncWriteMultipleHoldingRegister
<LI><a href="#[1e8a6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncWriteHoldingRegister
<LI><a href="#[1e8a6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncReadWriteMultipleHoldingRegister
<LI><a href="#[1e8a718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncReadHoldingRegister
</UL>

<P><STRONG><a name="[1e8e354]"></a>eMBRegInputCB</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, user_mb_app.o(i.eMBRegInputCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = eMBRegInputCB
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8e2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBMasterGetCBRunInMasterMode
<LI><a href="#[1e8e318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ucMBMasterGetDestAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8a2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncReadInputRegister
</UL>

<P><STRONG><a name="[1e93304]"></a>initsi4432</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, si4432.o(i.initsi4432))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = initsi4432 &rArr; SI4432_init &rArr; Si4432RegisterSetV26 &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[1e937f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvSYS_Delay
<LI><a href="#[1ef5dd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetMode
<LI><a href="#[28adb24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_rw
<LI><a href="#[28adc50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4432_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9373c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1e932c8]"></a>loraInit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, loramain.o(i.loraInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = loraInit
</UL>
<BR>[Calls]<UL><LI><a href="#[295b19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioDriverInit
<LI><a href="#[29f8dec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9373c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1e9328c]"></a>loramain</STRONG> (Thumb, 206 bytes, Stack size 8 bytes, loramain.o(i.loramain))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = loramain &rArr; SX1276GetRxPacket &rArr; SX1276LoRaGetRxPacket
</UL>
<BR>[Calls]<UL><LI><a href="#[295b160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276GetRxPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9373c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1e9373c]"></a>main</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = main &rArr; Blux_v3bPoll &rArr; B_LUX_GetLux &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1e93250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_data
<LI><a href="#[1e9328c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loramain
<LI><a href="#[1e932c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loraInit
<LI><a href="#[1e93304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initsi4432
<LI><a href="#[1e93340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBPoll
<LI><a href="#[1e9337c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBInit
<LI><a href="#[1e933b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBEnable
<LI><a href="#[1e9346c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveAddrPoll
<LI><a href="#[1e934a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Si4432Thread
<LI><a href="#[1e93520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSlaveAddr
<LI><a href="#[1e9355c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitBLUX_V30
<LI><a href="#[1e93598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWRealyInit
<LI><a href="#[1e93610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Co2SendCmd
<LI><a href="#[1e9364c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Co2Init
<LI><a href="#[1e93688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Co2EventPoll
<LI><a href="#[1e93700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blux_v3bPoll
<LI><a href="#[1e937b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry7.o(.ARM.Collect$$$$00000007)
</UL>
<P><STRONG><a name="[1e8c194]"></a>peBTFrameSendCur</STRONG> (Thumb, 216 bytes, Stack size 24 bytes, mbrtu.o(i.peBTFrameSendCur))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = peBTFrameSendCur &rArr; crc_ccitt
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8dc4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_ccitt
<LI><a href="#[1e90ba4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortSerialEnable
<LI><a href="#[1e92c38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExitCriticalSection
<LI><a href="#[1e92c74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterCriticalSection
<LI><a href="#[29f5930]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1e93340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBPoll
</UL>

<P><STRONG><a name="[1e8ba14]"></a>prveMBError2Exception</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, mbutils.o(i.prveMBError2Exception))
<BR><BR>[Called By]<UL><LI><a href="#[1e8a2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncReadInputRegister
<LI><a href="#[1e8a664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncWriteMultipleHoldingRegister
<LI><a href="#[1e8a6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncWriteHoldingRegister
<LI><a href="#[1e8a6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncReadWriteMultipleHoldingRegister
<LI><a href="#[1e8a718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncReadHoldingRegister
<LI><a href="#[1e8aed4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncReadDiscreteInputs
<LI><a href="#[1e8b348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncWriteMultipleCoils
<LI><a href="#[1e8b384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncWriteCoil
<LI><a href="#[1e8b3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncReadCoils
<LI><a href="#[1e8ba50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eBTFuncReadHoldingRegister
</UL>

<P><STRONG><a name="[29f5e1c]"></a>round</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, round.o(i.round))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = round &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2952574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[2955814]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[29f5de0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
<LI><a href="#[29f63bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[29f63f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[2958988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskProcess
</UL>

<P><STRONG><a name="[1e93250]"></a>rx_data</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, si4432.o(i.rx_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rx_data &rArr; spi_rw
</UL>
<BR>[Calls]<UL><LI><a href="#[28adb24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_rw
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9373c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[28adae8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_data
<LI><a href="#[28adb9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_rec_data
</UL>

<P><STRONG><a name="[28adb9c]"></a>save_rec_data</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, si4432.o(i.save_rec_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = save_rec_data &rArr; rx_data &rArr; spi_rw
</UL>
<BR>[Calls]<UL><LI><a href="#[1e93250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_data
<LI><a href="#[28adb24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_rw
<LI><a href="#[28adb60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_byte
<LI><a href="#[28adbd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clr_interruput_si4432
<LI><a href="#[28adc8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RE_RSSI
</UL>
<BR>[Called By]<UL><LI><a href="#[1e934a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Si4432Thread
</UL>

<P><STRONG><a name="[28adb60]"></a>spi_byte</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, si4432.o(i.spi_byte))
<BR><BR>[Called By]<UL><LI><a href="#[28adb9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_rec_data
</UL>

<P><STRONG><a name="[28adb24]"></a>spi_rw</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, si4432.o(i.spi_rw))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = spi_rw
</UL>
<BR>[Called By]<UL><LI><a href="#[1e93250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_data
<LI><a href="#[1e93304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initsi4432
<LI><a href="#[28adae8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_data
<LI><a href="#[28adb9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_rec_data
<LI><a href="#[28adbd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clr_interruput_si4432
<LI><a href="#[28adc14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Si4432RegisterSetV26
<LI><a href="#[28adc50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4432_init
<LI><a href="#[28adc8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RE_RSSI
<LI><a href="#[28add40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_si4432_HW
</UL>

<P><STRONG><a name="[28adae8]"></a>tx_data</STRONG> (Thumb, 264 bytes, Stack size 40 bytes, si4432.o(i.tx_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = tx_data &rArr; SI4432_init &rArr; Si4432RegisterSetV26 &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[1e93250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_data
<LI><a href="#[1e937f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvSYS_Delay
<LI><a href="#[28adb24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_rw
<LI><a href="#[28adc50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4432_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1e934a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Si4432Thread
</UL>

<P><STRONG><a name="[1e8e318]"></a>ucMBMasterGetDestAddress</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, user_mb_app.o(i.ucMBMasterGetDestAddress))
<BR><BR>[Called By]<UL><LI><a href="#[1e8e354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegInputCB
<LI><a href="#[1e8e390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegHoldingCB
<LI><a href="#[1e8e3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegDiscreteCB
<LI><a href="#[1e8e408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegCoilsCB
</UL>

<P><STRONG><a name="[1e8dc10]"></a>usMBCRC16</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, mbcrc.o(i.usMBCRC16))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usMBCRC16
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8c248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUSend
<LI><a href="#[1e8c284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUReceive
</UL>

<P><STRONG><a name="[1e90ba4]"></a>vMBPortSerialEnable</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, portserial.o(i.vMBPortSerialEnable))
<BR><BR>[Called By]<UL><LI><a href="#[1e8c0e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBRTUTransmitFSM
<LI><a href="#[1e8c194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peBTFrameSendCur
<LI><a href="#[1e8c1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUStop
<LI><a href="#[1e8c20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUStart
<LI><a href="#[1e8c248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUSend
</UL>

<P><STRONG><a name="[1e8f614]"></a>vMBPortTimersDisable</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, porttimer.o(i.vMBPortTimersDisable))
<BR><BR>[Called By]<UL><LI><a href="#[1e8c11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBRTUTimerT35Expired
<LI><a href="#[1e8c1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUStop
</UL>

<P><STRONG><a name="[1e8f5d8]"></a>vMBPortTimersEnable</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, porttimer.o(i.vMBPortTimersEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vMBPortTimersEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8f998]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Start
<LI><a href="#[1e8f9d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_EnableInt
<LI><a href="#[1e8fa4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8c158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBRTUReceiveFSM
<LI><a href="#[1e8c20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUStart
</UL>

<P><STRONG><a name="[28b0680]"></a>x3THPortSerialGetByte</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, uart3th.o(i.x3THPortSerialGetByte))
<BR><BR>[Called By]<UL><LI><a href="#[28b06bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
</UL>

<P><STRONG><a name="[28b0644]"></a>x3THPortSerialInit</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, uart3th.o(i.x3THPortSerialInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = x3THPortSerialInit &rArr; UART_Open &rArr; CLK_GetPLLClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1e90a78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetModuleClock
<LI><a href="#[1e90ab4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableModuleClock
<LI><a href="#[1e92c38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExitCriticalSection
<LI><a href="#[1e92c74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterCriticalSection
<LI><a href="#[1e933f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Open
<LI><a href="#[1e934e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ResetModule
<LI><a href="#[28b0c20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[28b0c5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9364c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Co2Init
</UL>

<P><STRONG><a name="[28b05cc]"></a>x3THPortTimersDisable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, uart3th.o(i.x3THPortTimersDisable))
<BR><BR>[Called By]<UL><LI><a href="#[28b06f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR2_IRQHandler
</UL>

<P><STRONG><a name="[28b0590]"></a>x3THPortTimersEnable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, uart3th.o(i.x3THPortTimersEnable))
<BR><BR>[Called By]<UL><LI><a href="#[28b06bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
</UL>

<P><STRONG><a name="[28b0554]"></a>x3THPortTimersInit</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, uart3th.o(i.x3THPortTimersInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = x3THPortTimersInit &rArr; TIMER_Open &rArr; TIMER_GetModuleClock
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8f560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Open
<LI><a href="#[28b0c20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[28b0c5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9364c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Co2Init
</UL>

<P><STRONG><a name="[1e8e2dc]"></a>xMBMasterGetCBRunInMasterMode</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, user_mb_app.o(i.xMBMasterGetCBRunInMasterMode))
<BR><BR>[Called By]<UL><LI><a href="#[1e8e354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegInputCB
<LI><a href="#[1e8e390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegHoldingCB
<LI><a href="#[1e8e3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegDiscreteCB
<LI><a href="#[1e8e408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegCoilsCB
</UL>

<P><STRONG><a name="[1e922d8]"></a>xMBPortEventGet</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, portevent.o(i.xMBPortEventGet))
<BR><BR>[Called By]<UL><LI><a href="#[1e93340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBPoll
</UL>

<P><STRONG><a name="[1e9229c]"></a>xMBPortEventInit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, portevent.o(i.xMBPortEventInit))
<BR><BR>[Called By]<UL><LI><a href="#[1e9337c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBInit
</UL>

<P><STRONG><a name="[1e92260]"></a>xMBPortEventPost</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, portevent.o(i.xMBPortEventPost))
<BR><BR>[Called By]<UL><LI><a href="#[1e8c0e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBRTUTransmitFSM
<LI><a href="#[1e8c11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBRTUTimerT35Expired
<LI><a href="#[1e93340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBPoll
</UL>

<P><STRONG><a name="[1e90b68]"></a>xMBPortSerialGetByte</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, portserial.o(i.xMBPortSerialGetByte))
<BR><BR>[Called By]<UL><LI><a href="#[1e8c158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBRTUReceiveFSM
</UL>

<P><STRONG><a name="[1e90b2c]"></a>xMBPortSerialInit</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, portserial.o(i.xMBPortSerialInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = xMBPortSerialInit &rArr; UART_Open &rArr; CLK_GetPLLClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1e90a78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetModuleClock
<LI><a href="#[1e90ab4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableModuleClock
<LI><a href="#[1e91324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[1e92c38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExitCriticalSection
<LI><a href="#[1e92c74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterCriticalSection
<LI><a href="#[1e933f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Open
<LI><a href="#[1e934e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ResetModule
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8c2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUInit
</UL>

<P><STRONG><a name="[1e90af0]"></a>xMBPortSerialPutByte</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, portserial.o(i.xMBPortSerialPutByte))
<BR><BR>[Called By]<UL><LI><a href="#[1e8c0e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBRTUTransmitFSM
</UL>

<P><STRONG><a name="[1e8f59c]"></a>xMBPortTimersInit</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, porttimer.o(i.xMBPortTimersInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = xMBPortTimersInit &rArr; TIMER_Open &rArr; TIMER_GetModuleClock
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8f560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Open
<LI><a href="#[1e8f998]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Start
<LI><a href="#[1e8f9d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_EnableInt
<LI><a href="#[1e8fa10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[1e8fa4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8c2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUInit
</UL>

<P><STRONG><a name="[1e8c158]"></a>xMBRTUReceiveFSM</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, mbrtu.o(i.xMBRTUReceiveFSM))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xMBRTUReceiveFSM &rArr; vMBPortTimersEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8f5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortTimersEnable
<LI><a href="#[1e90b68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortSerialGetByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(i.eMBInit)
</UL>
<P><STRONG><a name="[1e8c11c]"></a>xMBRTUTimerT35Expired</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, mbrtu.o(i.xMBRTUTimerT35Expired))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = xMBRTUTimerT35Expired
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8f614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortTimersDisable
<LI><a href="#[1e92260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortEventPost
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(i.eMBInit)
</UL>
<P><STRONG><a name="[1e8c0e0]"></a>xMBRTUTransmitFSM</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, mbrtu.o(i.xMBRTUTransmitFSM))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = xMBRTUTransmitFSM
</UL>
<BR>[Calls]<UL><LI><a href="#[1e90af0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortSerialPutByte
<LI><a href="#[1e90ba4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortSerialEnable
<LI><a href="#[1e92260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortEventPost
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(i.eMBInit)
</UL>
<P><STRONG><a name="[1e8e2a0]"></a>xMBUtilGetBits</STRONG> (Thumb, 46 bytes, Stack size 20 bytes, mbutils.o(i.xMBUtilGetBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = xMBUtilGetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8e3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegDiscreteCB
<LI><a href="#[1e8e408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegCoilsCB
</UL>

<P><STRONG><a name="[1e8e264]"></a>xMBUtilSetBits</STRONG> (Thumb, 80 bytes, Stack size 44 bytes, mbutils.o(i.xMBUtilSetBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = xMBUtilSetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8e3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegDiscreteCB
<LI><a href="#[1e8e408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegCoilsCB
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[1e91324]"></a>NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, portserial.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[1e90b2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortSerialInit
</UL>

<P><STRONG><a name="[1e912e8]"></a>prvvUARTRxISR</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, portserial.o(i.prvvUARTRxISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvvUARTRxISR
</UL>
<BR>[Called By]<UL><LI><a href="#[1e90c1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
</UL>

<P><STRONG><a name="[1e912ac]"></a>prvvUARTTxReadyISR</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, portserial.o(i.prvvUARTTxReadyISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvvUARTTxReadyISR
</UL>
<BR>[Called By]<UL><LI><a href="#[1e90c1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
</UL>

<P><STRONG><a name="[1e8fa4c]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, porttimer.o(i.NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[1e8f59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortTimersInit
<LI><a href="#[1e8f5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortTimersEnable
</UL>

<P><STRONG><a name="[1e8fa10]"></a>NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, porttimer.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8f59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortTimersInit
</UL>

<P><STRONG><a name="[1e8f9d4]"></a>TIMER_EnableInt</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, porttimer.o(i.TIMER_EnableInt))
<BR><BR>[Called By]<UL><LI><a href="#[1e8f59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortTimersInit
<LI><a href="#[1e8f5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortTimersEnable
</UL>

<P><STRONG><a name="[1e8f998]"></a>TIMER_Start</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, porttimer.o(i.TIMER_Start))
<BR><BR>[Called By]<UL><LI><a href="#[1e8f59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortTimersInit
<LI><a href="#[1e8f5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortTimersEnable
</UL>

<P><STRONG><a name="[1e8f95c]"></a>prvvTIMERExpiredISR</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, porttimer.o(i.prvvTIMERExpiredISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvvTIMERExpiredISR
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8f650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR1_IRQHandler
</UL>

<P><STRONG><a name="[28b5edc]"></a>CLK_GetPLLClockFreq</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, uart.o(i.CLK_GetPLLClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = CLK_GetPLLClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[29f5a20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1e933f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Open
</UL>

<P><STRONG><a name="[28b4ab4]"></a>Default_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m051series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[28b3a4c]"></a>CLK_GetPLLClockFreq</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, system_m051series.o(i.CLK_GetPLLClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = CLK_GetPLLClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[29f5a20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1e93430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>

<P><STRONG><a name="[28b0c5c]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, uart3th.o(i.NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[28b0554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x3THPortTimersInit
<LI><a href="#[28b0644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x3THPortSerialInit
</UL>

<P><STRONG><a name="[28b0c20]"></a>NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, uart3th.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[28b0554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x3THPortTimersInit
<LI><a href="#[28b0644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x3THPortSerialInit
</UL>

<P><STRONG><a name="[295bfe8]"></a>SYS_UnlockReg</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fmc_data_flash.o(i.SYS_UnlockReg))
<BR><BR>[Called By]<UL><LI><a href="#[295bb38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveUserSlaveRfChl
<LI><a href="#[295bb74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveUserSlaveAddr
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
